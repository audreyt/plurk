<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
	 xmlns:s="library://ns.adobe.com/flex/spark" 
	 xmlns:mx="library://ns.adobe.com/flex/mx"
	 xmlns:uiDisplay="uiDisplay" width="556" height="200" xmlns:uiDispaly="uiDispaly.*" xmlns:comp="comp.*"
	   title="Add a  response" enabled="true" >
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Metadata>
		 [Event(name="plurk_idChange",type="flash.events.Event")] 
		[Event(name="addResponse",type="events.AddNewResponse")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import comp.Responses;
			import comp.Timeline;
			import comp.basicProfile;
			
			import events.AddNewResponse;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			
			import uiDisplay.verbContainer;
			import uiDisplay.verbItem;
			public static const PLURK_ID_CHANGE_EVENT:String = "plurk_idChange";
			
//			[Bindable]
			private var _plurk_id:uint;
			

 			[Bindable(event="plurk_idChange")]
			public function get plurk_id():uint
			{
				return _plurk_id;
			}

			public function set plurk_id(value:uint):void
			{
				if (_plurk_id != value) {
					_plurk_id = value;
					dispatchEvent(new Event(PLURK_ID_CHANGE_EVENT));
				}
			} 

			
			[Bindable]
			private var verbProvider:ArrayCollection = new ArrayCollection([":","loves","likes","shares","gives","hates","wants","wishes","needs","will","hopes","asks","has","was","wonders","feels","thinks","says","is"]);
			
			public function addResponseEditorHandler():void {
				Responses.doResponseAdd(this._plurk_id,this.responseContent.text,this.verb.selectedItem, responseAddComplete);
			}
			
			private function responseAddComplete(result:Object):void {
				// error handler
				if (result.error_text) {
					Alert.show(result.error_text);
				}
				else {
				//success
					Alert.show(result.content + "--- New response added!");
					var addNewResponse:AddNewResponse = new AddNewResponse("addResponse",true);
					this.dispatchEvent(addNewResponse);
					this.responseContent.text = "";
				}
			}
			
			private function verbListRollOverHandler(e:MouseEvent):void {
				this.verb.openDropDown();
			}
			
//			private function verbListRollOutHandler(e:MouseEvent):void {
//				e.target.closeDropDown(true);
////				this.verb.closeDropDown(true);
//			}

			protected function smileys_changeHandler(e:IndexChangeEvent):void
			{
				// TODO Auto-generated method stub
				this.responseContent.appendText(this.smileys.dataProvider.getItemAt(e.newIndex)[0].toString());
			}
			
//			private function titleWindowCloseHandler(e:CloseEvent):void {
//				PopUpManager.removePopUp(UIComponent(e.currentTarget));
//			}



		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:controlBarContent>
	
	</s:controlBarContent>
	<s:BorderContainer borderVisible="false" width="551">
	<s:layout>
		<s:HorizontalLayout paddingLeft="10" paddingRight="10" paddingTop="10"/>
	</s:layout>	
	<s:Label text="{basicProfile.displayName}"/>
	<s:DropDownList id="verb" width="80" prompt=":" chromeColor="{uiDisplay.verbContainer.colorOf(this.verb.selectedItem)}" dataProvider="{this.verbProvider}" click="verbListRollOverHandler(event)"
			 itemRenderer="uiDisplay.verbItem" rollOver="verbListRollOverHandler(event)" 
			 open="UIComponent(verb.dropDown).maxHeight = NaN">
	<!--		 rollOut="verbListRollOutHandler(event)">-->
		<s:layout>
			<s:VerticalLayout horizontalAlign="center" requestedRowCount="{this.verbProvider.length}"/>
		</s:layout>
	</s:DropDownList>
	<s:TextArea id="responseContent" minHeight="25" width="150" height="75"/>
	<comp:chooseEmoticons id="smileys" change="smileys_changeHandler(event)" />
	<s:Button label="Reply" click="addResponseEditorHandler()"/>
	</s:BorderContainer>
</s:Panel>
