<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
	 xmlns:s="library://ns.adobe.com/flex/spark" 
	 xmlns:mx="library://ns.adobe.com/flex/mx"
	 xmlns:uiDisplay="uiDisplay" width="700" height="200" xmlns:uiDispaly="uiDispaly.*" xmlns:comp="comp.*"
	  close="titleWindowCloseHandler(event)"
	   creationComplete="init()">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Metadata>
		[Event(name="addPlurk",type="events.AddNewPlurk")]
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import comp.autoLink;
			import comp.imgUploader;
			
			import events.AddNewLink;
			
			private var IMGuploader:imgUploader = new imgUploader();
			private var AutoLink:autoLink = new autoLink();
			
			private function init():void{
				// Listen to "autoLink" event!
				this.AutoLink.addEventListener("addLinktoMain",addAutoLinkEventHandler);
			}
			
			protected function buttonbarTypo_changeHandler(e:IndexChangeEvent):void
			{
				var Typo:String = e.target.selectedItem;
				var Caret:int;
				switch (Typo) {
					case "I":
						this.plurkContent.insertText("**");
						Caret = this.plurkContent.selectionActivePosition -1;
						this.plurkContent.selectRange(Caret,Caret);
						this.plurkContent.setFocus();
					break;
					case "B":
						this.plurkContent.insertText("****");
						Caret = this.plurkContent.selectionActivePosition -2;
						this.plurkContent.selectRange(Caret,Caret);
						this.plurkContent.setFocus();
					break;
					case "U":
						this.plurkContent.insertText("____");
						Caret = this.plurkContent.selectionActivePosition -2;
						this.plurkContent.selectRange(Caret,Caret);
						this.plurkContent.setFocus();
					break;
					default:
				}
				
			}
			
			protected function addAutoLinkEventHandler(e:AddNewLink):void {
				this.plurkContent.setFocus();
				this.plurkContent.insertText(this.AutoLink.URL + " (" + this.AutoLink.Caption +")");
			}
			
			private function popUpImgUploaderHandler(e:MouseEvent):void {
				PopUpManager.addPopUp(this.IMGuploader,this,true);
				PopUpManager.centerPopUp(this.IMGuploader);
				PopUpManager.bringToFront(this.IMGuploader);
			}
			private function popUpAutoLinkHandler(e:MouseEvent):void {
				PopUpManager.addPopUp(this.AutoLink,this,true);
				PopUpManager.centerPopUp(this.AutoLink);
				PopUpManager.bringToFront(this.AutoLink);
			}
		]]>
	</fx:Script>

	<fx:Script>
		<![CDATA[
			import comp.Timeline;
			import comp.basicProfile;
			
			import events.AddNewPlurk;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			import spark.events.IndexChangeEvent;
			
			import uiDisplay.verbContainer;
			import uiDisplay.verbItem;
			
			
			[Bindable]
			private var verbProvider:ArrayCollection = new ArrayCollection([":","loves","likes","shares","gives","hates","wants","wishes","needs","will","hopes","asks","has","was","wonders","feels","thinks","says","is"]);
			
			private function addPlurkEditorHandler():void {
				Timeline.doPlurkAdd(this.plurkContent.text,this.verb.selectedItem,plurkAddCompelete);
			}
			
			private function plurkAddCompelete(result:Object):void {
				// error handler
				if (result.error_text) {
					Alert.show(result.error_text);
				}
				else {
				//success
					Alert.show("New plurk added!");
					var addNewPlurk:AddNewPlurk = new AddNewPlurk("addPlurk",true);
					this.dispatchEvent(addNewPlurk);
					this.plurkContent.text = "";
				}
			}
			
			private function verbListRollOverHandler(e:MouseEvent):void {
				this.verb.openDropDown();
//				this.verb.openDropDown();
			}
			
//			private function verbListRollOutHandler(e:MouseEvent):void {
//				e.target.closeDropDown(true);
////				this.verb.closeDropDown(true);
//			}

			protected function smileys_changeHandler(e:IndexChangeEvent):void
			{
				// TODO Auto-generated method stub
				this.plurkContent.appendText(this.smileys.dataProvider.getItemAt(e.newIndex)[0].toString());
			}
			
			private function titleWindowCloseHandler(e:CloseEvent):void {
				PopUpManager.removePopUp(UIComponent(e.currentTarget));
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:BorderContainer>
	<s:layout>
		<s:HorizontalLayout/>
	</s:layout>	
	<s:Label text="{basicProfile.displayName}"/>
	<s:DropDownList id="verb" width="80" selectedIndex="0" prompt=":" chromeColor="{uiDisplay.verbContainer.colorOf(this.verb.selectedItem)}" dataProvider="{this.verbProvider}" click="verbListRollOverHandler(event)"
			 itemRenderer="uiDisplay.verbItem" rollOver="verbListRollOverHandler(event)" 
			 open="UIComponent(verb.dropDown).maxHeight = NaN">
	<!--		 rollOut="verbListRollOutHandler(event)">-->
		<s:layout>
			<s:VerticalLayout horizontalAlign="center" requestedRowCount="{this.verbProvider.length}"/>
		</s:layout>
	</s:DropDownList>
		<s:Group>
	<s:TextArea id="plurkContent" minHeight="100">
	</s:TextArea>
		</s:Group>
	<comp:chooseEmoticons id="smileys" change="smileys_changeHandler(event)" />

	<s:Button label="Plurk" click="addPlurkEditorHandler()"/>
	</s:BorderContainer>
	<s:ButtonBar change="buttonbarTypo_changeHandler(event)">
		
		<s:dataProvider>
			<s:ArrayCollection>
				<fx:String id="I">I</fx:String>
				<fx:String id="B">B</fx:String>
				<fx:String id="U">U</fx:String>
			</s:ArrayCollection>
		</s:dataProvider>
	</s:ButtonBar>		
	<s:Button id="uploadImg" click="popUpImgUploaderHandler(event)"/>
	<s:Button id="autoLINK" click="popUpAutoLinkHandler(event)"/>
</s:TitleWindow>
