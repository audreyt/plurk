<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   xmlns:flexlib="flexlib.scheduling.*" 
		   creationComplete="onCreationComplete();" width="900" height="600">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Script>
		<![CDATA[
//			import comp.Timeline;
			//Timeline
			import flexlib.scheduling.samples.ScheduleData;
			import flexlib.scheduling.scheduleClasses.BackgroundItem;
			import flexlib.scheduling.scheduleClasses.ColoredScheduleEntry;
			import flexlib.scheduling.scheduleClasses.SimpleScheduleEntry;
			import flexlib.scheduling.util.DateUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.ScrollEvent;
			import mx.events.ScrollEventDirection;
			import mx.formatters.DateFormatter;
			
			import events.AddNewPlurk;
			
			[Bindable]
			private var startDate : Date;
			[Bindable]
			private var endDate : Date;
			[Bindable]
			private var zoom : Number;
			[Bindable]
			private var scheduleViewerWidth : Number = 900;
			
			
			//
			[Bindable]
			private var entryData:ArrayCollection;
			[Bindable]
			private var microData:Object;
			[Bindable]
			private var usersData:Object;
			[Bindable]
			private var TimeOffSet:Number;
			[Bindable]
			private var now:Date = new Date();
			[Bindable]
			private var hr24Ago :String ;
			[Bindable]
			private var nowUTC:String;
			
//			private var widthBox:BorderContainer = new BorderContainer();
			
			
			private function onCreationComplete() : void
			{
				setTimeframe();
				//				initDataProvider();
				initBackgroundColors();
				this.zoom = zoomSlider.value;
			}
			
			private function setTimeframe() : void
			{
				startDate = new Date((new Date()).getTime() - DateUtil.HOUR_IN_MILLISECONDS*24);
				//				startDate = DateUtil.clearTime( new Date() );
				endDate = getEndDate( startDate );
			}
			
			private function getEndDate( startDate : Date ) : Date
			{
				var duration : Number = DateUtil.DAY_IN_MILLISECONDS * 1+DateUtil.HOUR_IN_MILLISECONDS*2;
				var endDate : Date = new Date( startDate.getTime() + duration );
				return endDate;
			}
			private function onZoom( value : Number ) : void
			{
				zoom = value;
			}
			private function onScrollTimeline( position : Number ) : void
			{
				scheduleViewer.xPosition = position;
			}
			
			private function onScrollScheduleViewer( event : ScrollEvent ) : void
			{            
				if( event.direction == ScrollEventDirection.HORIZONTAL )
				{
					timeline.xPosition = event.position;
				}
			} 
			
			[Bindable(event="addPlurk")]
			public function gotoNow() : void
			{
				var time : Date = new Date();
				comp.Timeline.doGetPlurks(getPlurksComplete,null,"50");
//				PlurkBase.load(this.getPlurks,{},getPlurksComplete);
				//				this.bridge.load(this.getPlurks,{api_key:this.API_KEY},getPlurksComplete);
				//				this.APIMethod(this.getPlurks,this.ob_PlurksAPI,getPlurksComplete);
				scheduleViewer.moveToTime( time.getTime() - startDate.getTime() );
			}
			
			private function gotoSelectedEntry() : void
			{
				if( scheduleViewer.selectedItem != null )
				{
					scheduleViewer.moveToEntry( scheduleViewer.selectedItem );
				}
				else
				{
					warnAboutNoSelection();
				}
			}
			
			private function warnAboutNoSelection() : void
			{
				Alert.show( "Please select an entry." );
			}
			
			private function initBackgroundColors() : void
			{
				var result : ArrayCollection = new ArrayCollection();
				
				var duration : Number = endDate.getTime() - startDate.getTime();
				var days : Number = duration / DateUtil.DAY_IN_MILLISECONDS;
				
				for( var i : int; i < days; i++ )
				{
					var currentDate : Number = DateUtil.DAY_IN_MILLISECONDS * i;
					var backgroundItem : BackgroundItem;
					backgroundItem = createBackgroundItem( "office closed", 0xD5D4D0, 
						currentDate, 0, 0, 24, 0 );         
					result.addItem( backgroundItem );
					
					backgroundItem = createBackgroundItem( "generell office hours", 0xFFFFFF, 
						currentDate, 9, 0, 17, 0 );
					result.addItem( backgroundItem );
					
					backgroundItem = createBackgroundItem( "lunchtime", 0xEEEDE9, 
						currentDate, 12, 0, 13, 0 );
					result.addItem( backgroundItem );         
				}            
				scheduleViewer.backgroundItems = result;
			}
			
			private function createBackgroundItem( description : String,color : Number, currentDate : Number,startHours : Number, startMinutes : Number,endHours : Number, endMinutes : Number ) : BackgroundItem
			{
				var backgroundItem : BackgroundItem = new BackgroundItem();
				backgroundItem.description = description;
				backgroundItem.color = color;
				backgroundItem.startDate = new Date( currentDate + createTime( startHours, startMinutes ) );
				backgroundItem.endDate = new Date( currentDate + createTime( endHours, endMinutes ) );
				return backgroundItem;   
			} 
			
			private function createTime( hours : Number, minutes : Number ) : Number
			{
				var result : Number = (( hours * 60 ) + minutes ) * 60 * 1000;
				return result;
			}
			
			private function getPlurksComplete(result:Object):void
			{
				if(result.error_text)
				{
					//Error handler
					//					trace(result.error_text);
					Alert.show(result.error_text);
				}
				else
				{
					//Success
					//					trace(result.user_info.display_name);
					this.microData = result.plurks;
					this.usersData = result.plurk_users;
					var addEntryData:ArrayCollection = new ArrayCollection();
					for each (var i:Object in this.microData) {
						var entry:ColoredScheduleEntry = new ColoredScheduleEntry();
						var now:Date = new Date();
						var postedDateUTC:Date;
						var postedStr:String = i.posted.toString();
						var newPostedStr:String= postedStr.split(" GMT").join("");
						//						Alert.show(newPostedStr);
						//						var postedFormatter:DateFormatter = new DateFormatter();
						//						postedFormatter.formatString = "EEE, DD MMM YYYY JJ:NN:SS";
						var postedDate:Date = DateFormatter.parseDateString(newPostedStr);
						this.TimeOffSet = now.getTimezoneOffset();
						//						Alert.show(postedDate.toUTCString());
						//						Alert.show(now.toUTCString(),this.TimeOffSet.toString());
						entry.startDate = new Date(postedDate.getTime() - DateUtil.MINUTE_IN_MILLISECONDS*this.TimeOffSet);
						//						entry.startDate = DateUtil.clearTime(new Date());
						var widthSecond:int = (this.btnNow.measureHTMLText(i.content).width)/15;
						entry.endDate = new Date(entry.startDate.getTime() + DateUtil.MINUTE_IN_MILLISECONDS*(widthSecond +10));
//						entry.endDate = new Date(entry.startDate.getTime() + DateUtil.MINUTE_IN_MILLISECONDS*20 );
						//						entry.endDate = new Date(entry.startDate.getTime() + DateUtil.HOUR_IN_MILLISECONDS*24 );
						var j:Number = i.owner_id;
						var z:String = j.toString();
						var userProfile:Object= new Object();
						userProfile = this.usersData[j];
						//						Alert.show([userProfile].length.toString());
						if(userProfile.has_profile_image == 1 && userProfile.avatar == (null||0)){
							//									entry.ownerImgUrl = "http://avatars.plurk.com/"+z+"-small.gif";
							entry.ownerImgUrl = "http://avatars.plurk.com/"+z+"-medium.gif";
						}
						else if(userProfile.has_profile_image == 1 && userProfile.avatar != (null&&0)){
							//									entry.ownerImgUrl = "http://avatars.plurk.com/" + z + "-small" +userProfile.avatar +".gif";
							entry.ownerImgUrl = "http://avatars.plurk.com/" + z+ "-medium" +userProfile.avatar +".gif";
						}
						else if(userProfile.has_profile_image == 0){
							entry.ownerImgUrl = "http://www.plurk.com/static/default_medium.gif";
							//									entry.ownerImgUrl = "http://www.plurk.com/static/default_small.gif";
						}
						
						entry.qualifier = i.qualifier;
						entry.nickName = userProfile.nick_name;
						entry.dispalyName = userProfile.display_name;
						entry.fullName = userProfile.full_name;
						entry.label= i.content;
						//						entry.label =TextConverter.importToFlow( i.content, TextConverter.TEXT_FIELD_HTML_FORMAT);
						//						Alert.show(TextConverter.importToFlow( i.content, TextConverter.TEXT_FIELD_HTML_FORMAT) as String);
						//						Alert.show(entry.label);
						var limited:String = i.limited_to;
						var entryBGcolor:int;
						switch(limited){
							case null:
								entryBGcolor = 0xFFFFFF;
								//white
								break;
							case "|0|":
								entryBGcolor = 0x99CCFF;
								//light blue
								break;
							default:
								entryBGcolor = 0x999999;
								//grey
								break;
						}
//						entry.width = this.btnNow.measureHTMLText(i.content).width + 50;
						entry.backgroundColor = entryBGcolor;

						//						this.bridge.load(this.getPlurk,{api_key:this.API_KEY,plurk_id:m},getPlurkComplete);
						//						entry.ownerImgUrl = this.user_avatar_url;
						addEntryData.addItem(entry);
					}
					this.entryData = addEntryData;
//					PlurkBase.load(this.NotificationURL,{},getNotification);
					//					this.bridge.load(this.NotificationURL,{api_key:this.API_KEY},getNotification);
					
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:DateFormatter id="dateFormatter" formatString="YYYY-M-DDTJJ:NN:SS"/>
	</fx:Declarations>

		
		<flexlib:Timeline 
			id="timeline" 
			width="{scheduleViewerWidth}" borderStyle="none"  
			startDate="{startDate}" endDate="{ endDate}" 
			zoom="{zoom}" 
			scroll="onScrollTimeline( event.position );" 
			/>
		
		<flexlib:ScheduleViewer 
			id="scheduleViewer"  
			width="{scheduleViewerWidth}" height="400" borderStyle="none"
			dataProvider="{this.entryData}"    
			startDate="{startDate}" endDate="{endDate}" 
			zoom="@{zoom}" 
			horizontalScrollPolicy="off" 
			entryRenderer="flexlib.scheduling.scheduleClasses.renderers.ColoredSolidScheduleEntryRenderer" 
			pixelScroll="onScrollScheduleViewer( event );" 
			/>
		
		<mx:HBox width="{ scheduleViewerWidth }" paddingTop="6">      
			<mx:Label text="Goto:"/>
			<mx:Button id="btnNow" label="Now" click="gotoNow();"/>
			<mx:Button label="Selected" click="gotoSelectedEntry();"/>
			<mx:Spacer width="100%"/>
			<mx:Label text="Zoom:"/>
			<mx:HSlider 
				id="zoomSlider" 
				minimum="0" maximum="1000" value="450"  
				snapInterval="1" liveDragging="true" 
				change="onZoom( zoomSlider.value );"  />
		</mx:HBox>   
</s:BorderContainer>
