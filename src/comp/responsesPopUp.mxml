<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
	 xmlns:s="library://ns.adobe.com/flex/spark" 
	 xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300" xmlns:comp="comp.*" xmlns:events="events.*"
	   creationComplete="init()">
		
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Script>
		<![CDATA[
			import comp.PlurkParser;
			import comp.ResponseWindow;
			import comp.Responses;
			import comp.addResponseEditor;
			import comp.responsesViewer;
			
			import events.AddNewResponse;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import mx.managers.PopUpManager;
			
			
			[Bindable]
			public var responsesCount:Number;
			[Bindable]
			public var plurk_id:uint;
//			[Bindable]
//			private var ViewerVisible:Boolean = false;
			[Bindable]
			private var allItemsHeight:uint;
			[Bindable]
			private var readCount:uint;
			
			private function toggleResponses(e:Event):void {
				if(e.target.selected){
					this.currentState = "open";
					Responses.doGet(this.plurk_id,0,getResponseComplete);
					this.responsesPop.displayPopUp= true;
					import comp.PlurkBase;
					PlurkBase.popUps.push([btn_resCount, responsesPop]);
					this.responseEditor.verb.selectedIndex = 0;
					this.responseEditor.smileys.selectedIndex = 0;
					this.responseEditor.responseContent.text = "";
//					this.responseEditor.verb.prompt = ":";
//					this.responseEditor.smileys.prompt = ":-)";
					this.responseEditor.validateNow();
//					this.viewer.responseEditor.validateProperties();
					
				}
				else {
					this.responsesPop.displayPopUp = false;
					this.currentState = "close";
				}
			}			
			
			private function addResponseListener():void{
				this.responseEditor.addEventListener("addResponse",addNewResponseEventHandler);
			}
			
			private function addNewResponseEventHandler(e:AddNewResponse):void {		
					Responses.doGet(this.plurk_id,0,getResponseComplete);
//					Responses.doGet(e.target.plurk_id,0,getResponseComplete);
					this.responsesPop.displayPopUp= true;
			}
			
			private function getResponseComplete(result:Object):void {
				if (result.error_text) {
					Alert.show(result.error_text);
				}
				else {
					var responsesData:ArrayCollection = new ArrayCollection();
//					var responsesBlock:responsesViewer = new responsesViewer();
//					import mx.core.FlexGlobals;
//					this.readCount = uint(result.responses_seen);
					responsesData = PlurkParser.responsesParse(result);
					this.viewer.Responses.dataProvider = responsesData;
					this.readCount = PlurkParser.readResponsesOffset;
					this.responsesCount = responsesData.length;
					this.btn_resCount.validateNow();
					if (this.responsesCount != 0 && this.readCount !=0 ){
						var i:uint;
						do {
							i = this.viewer.Responses.dataGroup.numElements;
						}while ( i < this.responsesCount );
						var self:* = this;
						callLater(function():void{
//							self.viewer.Responses.validateNow();
							self.viewer.Responses.ensureIndexIsVisible(self.readCount-1);
//							self.viewer.Responses.validateNow();
						});
					}
				}
				
			}
			
//			protected function listDataRenderCompleteHandler(e:FlexEvent):void {
//				this.allItemsHeight = this.viewer.Responses.dataGroup.contentHeight - this.viewer.Responses.height;
				// XXX
				
//			}

			protected function init():void
			{
				this.currentState = "close";
			}
			
			protected function popUp_responseWindow(e:MouseEvent):void {
				var resWindow:ResponseWindow = new ResponseWindow();
				resWindow.plurk_id = this.plurk_id;
				resWindow.responsesCount = this.responsesCount;
				PopUpManager.addPopUp(resWindow,this,false);
				PopUpManager.centerPopUp(resWindow);
				PopUpManager.bringToFront(resWindow);
			}

		]]>
	</fx:Script>
	<s:states>
		<s:State name="close"/>
		<s:State name="open"/>
	</s:states>
	
	<s:ToggleButton id="btn_resCount" width="50" label="{this.responsesCount.toString()}" click="toggleResponses(event)">
<!--		<s:styleName>
			<s:Stroke color="0x6994bf" caps="square" weight="3" alpha="0.3"/>
		</s:styleName>-->
	</s:ToggleButton>
	<s:PopUpAnchor id="responsesPop" popUpPosition="right" includeIn="open" itemDestructionPolicy="auto">
		<s:popUp>
			
		<s:BorderContainer borderVisible="false">
			<s:layout>
				<s:VerticalLayout>
				</s:VerticalLayout>
			</s:layout>
			<!--<comp:responsesViewer id="viewer" />-->
			<comp:responsesViewer id="viewer" creationComplete="addResponseListener()" />
			<!--<comp:addPlurkEditor/>-->
			<comp:addResponseEditor id="responseEditor" plurk_id="{this.plurk_id}"/>
			<s:Button id="responseWindow" label="link" click="popUp_responseWindow(event)"/>
		</s:BorderContainer>
		</s:popUp>
	</s:PopUpAnchor>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
</s:Group>

