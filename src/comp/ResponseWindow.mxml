<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
	       xmlns:s="library://ns.adobe.com/flex/spark" 
	       xmlns:mx="library://ns.adobe.com/flex/mx" width="562" height="300" xmlns:comp="comp.*"
	       xmlns:events="events.*"
	       close="titleWindowCloseHandler(event)"
	       creationComplete="init()">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Script>
		<![CDATA[
			import comp.PlurkParser;
			import comp.Responses;
			import comp.Timeline;
			import comp.addResponseEditor;
			import comp.entryPopUp;
			import comp.responsesViewer;
			
			import events.AddNewResponse;
			
			import flash.text.engine.Kerning;
			import flash.text.engine.LigatureLevel;
			import flash.text.engine.LineJustification;
			
			import flashx.textLayout.conversion.TextConverter;
			import flashx.textLayout.formats.Float;
			import flashx.textLayout.formats.LeadingModel;
			import flashx.textLayout.formats.TextLayoutFormat;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Label;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			[Bindable]
			public var responsesCount:Number;
			[Bindable]
			public var plurk_id:uint;
			[Bindable]
			private var allItemsHeight:uint;
			[Bindable]
			private var readCount:uint;
			
			private var qualifierLabel:Label = new Label();
			
			private function init():void {
				Timeline.doGetPlurk(this.plurk_id,getPlurkComplete);
				Responses.doGet(this.plurk_id,0,getResponseComplete);
			}
			
			private function getPlurkComplete(result:Object):void {
				var getPlurkData:Object;
				getPlurkData = PlurkParser.SingleParse(result);
				this.entry.displayName.text = getPlurkData.user.display_name;
				this.entry.displayName.setStyle("fontWeight","bold");
				this.entry.displayName.setStyle("fontSize",14);
				this.entry.qualifier.verb = getPlurkData.plurk.qualifier;
				
				qualifierLabel.text = getPlurkData.plurk.qualifier;
				this.entry.qualifier.addElement(qualifierLabel);
				this.entry.qualifier.width = this.btn_resCount.measureText(qualifierLabel.text).width + 10;
				this.entry.userImg.source = getPlurkData.user.ownerImgUrl;
				var tlformet:TextLayoutFormat = new TextLayoutFormat();
				tlformet.fontSize = 16;
				tlformet.kerning = flash.text.engine.Kerning.ON ;
				tlformet.leadingModel = flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_DOWN;
				tlformet.ligatureLevel = flash.text.engine.LigatureLevel.EXOTIC;
				tlformet.lineHeight = 20;
				
				this.entry.content.editable = false;
				//				var userImg:String = data.ownerImgUrl;
				//				var userImg:String = "<img src=\"" +data.ownerImgUrl + "\">";
				this.entry.content.textFlow = TextConverter.importToFlow(getPlurkData.plurk.content, TextConverter.TEXT_FIELD_HTML_FORMAT);
				this.entry.content.textFlow.format = tlformet;
			}
			
			private function clickResponses(e:MouseEvent):void {
//				if(e.target.selected){
					
					Responses.doGet(this.plurk_id,0,getResponseComplete);
//					this.responsesPop.displayPopUp= true;
					this.responseEditor.verb.selectedIndex = 0;
					this.responseEditor.smileys.selectedIndex = 0;
					this.responseEditor.responseContent.text = "";
					//					this.responseEditor.verb.prompt = ":";
					//					this.responseEditor.smileys.prompt = ":-)";
					this.responseEditor.validateNow();
					//					this.viewer.responseEditor.validateProperties();
//				}
//				else {
//					this.responsesPop.displayPopUp = false;
//				}
			}			
			
			private function addResponseListener():void{
				this.responseEditor.addEventListener("addResponse",addNewResponseEventHandler);
			}
			
			private function addNewResponseEventHandler(e:AddNewResponse):void {		
				Responses.doGet(this.plurk_id,0,getResponseComplete);
				//					Responses.doGet(e.target.plurk_id,0,getResponseComplete);
//				this.responsesPop.displayPopUp= true;
			}
			
			private function getResponseComplete(result:Object):void {
				if (result.error_text) {
					Alert.show(result.error_text);
				}
				else {
					var responsesData:ArrayCollection = new ArrayCollection();
					//					var responsesBlock:responsesViewer = new responsesViewer();
					//					import mx.core.FlexGlobals;
					//					this.readCount = uint(result.responses_seen);
					responsesData = PlurkParser.responsesParse(result);
					this.viewer.Responses.dataProvider = responsesData;
					this.readCount = PlurkParser.readResponsesOffset;
					this.responsesCount = responsesData.length;
					this.btn_resCount.validateNow();
					if (this.responsesCount != 0 && this.readCount !=0 ){
						var i:uint;
						do {
							i = this.viewer.Responses.dataGroup.numElements;
						}while ( i < this.responsesCount );
						var self:* = this;
						callLater(function():void{
							//							self.viewer.Responses.validateNow();
							self.viewer.Responses.ensureIndexIsVisible(self.readCount-1);
							//							self.viewer.Responses.validateNow();
						});
					}
				}
			}
			
			private function titleWindowCloseHandler(e:CloseEvent):void {
				PopUpManager.removePopUp(UIComponent(e.currentTarget));
			}
		]]>
	</fx:Script>
	<s:Button  id="btn_resCount" width="50" label="{this.responsesCount.toString()}" click="clickResponses(event)"/> 
	<comp:entryPopUp id="entry"/>
	<comp:responsesViewer  id="viewer" creationComplete="addResponseListener()"/>
	<comp:addResponseEditor  id="responseEditor" plurk_id="{this.plurk_id}"/>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
</s:TitleWindow>
